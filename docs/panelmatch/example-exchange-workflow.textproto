# proto-file: src/main/proto/wfa/measurement/api/v2alpha/exchange_workflow.proto
# proto-message: ExchangeWorkflow

################################################################################
# This is an example protocol for a Panel Match exchange.                      #
#                                                                              #
# * For details on each field, see the ExchangeWorkflow message definition.    #
# * Each step is run on hardware controlled by the `party` given in each step. #
################################################################################

# EDP provides a pepper used in generating AES keys.
steps {
  step_id: "generate-hkdf-pepper"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-hkdf-pepper" }
}

steps {
  step_id: "export-hkdf-pepper"
  party: DATA_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "hkdf-pepper" value: "edp-hkdf-pepper" }
  output_labels { key: "hkdf-pepper" value: "hkdf-pepper" }
}

steps {
  step_id: "import-hkdf-pepper"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "hkdf-pepper" value: "hkdf-pepper" }
  output_labels { key: "hkdf-pepper" value: "mp-hkdf-pepper" }
}

# EDP provides a pepper used in hashing encrypted identifiers.
steps {
  step_id: "generate-identifier-hash-pepper"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-identifier-hash-pepper" }
}

steps {
  step_id: "export-identifier-hash-pepper"
  party: DATA_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "identifier-hash-pepper" value: "edp-identifier-hash-pepper" }
  output_labels { key: "identifier-hash-pepper" value: "identifier-hash-pepper" }
}

steps {
  step_id: "import-identifier-hash-pepper"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "identifier-hash-pepper" value: "identifier-hash-pepper" }
  output_labels { key: "identifier-hash-pepper" value: "mp-identifier-hash-pepper" }
}

# MP provides private key as input.
steps {
  step_id: "mp-input-commutative-deterministic-key"
  party: MODEL_PROVIDER

  input_step {}

  output_labels { key: "input" value: "mp-commutative-deterministic-key" }
}

# MP provides unencrypted joinkeys as input.
steps {
  step_id: "mp-input-raw-joinkeys"
  party: MODEL_PROVIDER

  input_step {}

  output_labels { key: "input" value: "mp-raw-joinkeys" }
}

# EDP provides private key as input.
steps {
  step_id: "edp-input-commutative-deterministic-key"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-commutative-deterministic-key" }
}

# EDP provides symmetrically encrypted event data as input.
steps {
  step_id: "edp-input-encrypted-event-data"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-encrypted-event-data" }
}

# EDP provides the previous protocol execution's blinded joinkeys as input.
#
# These are used to validate that the new single-blinded joinkeys derived in
# this protocol don't deviate too much.
steps {
  step_id: "edp-input-previous-single-blinded-joinkeys"
  party: DATA_PROVIDER

  input_step {}

  output_labels { key: "input" value: "edp-previous-single-blinded-joinkeys" }
}

# MP wraps their panelist identifiers in a layer of deterministic commutative
# encryption.
steps {
  step_id: "single-blind"
  party: MODEL_PROVIDER

  encrypt_step {}

  input_labels { key: "data" value: "mp-raw-joinkeys" }
  input_labels { key: "crypto-key" value: "mp-commutative-deterministic-key" }

  output_labels { key: "output" value: "mp-single-blinded-joinkeys" }
}

steps {
  step_id: "export-single-blinded-joinkeys"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "single-blinded-joinkeys" value: "mp-single-blinded-joinkeys" }
  output_labels { key: "single-blinded-joinkeys" value: "single-blinded-joinkeys" }
}

steps {
  step_id: "import-single-blinded-joinkeys"
  party: DATA_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "single-blinded-joinkeys" value: "single-blinded-joinkeys" }
  output_labels { key: "single-blinded-joinkeys" value: "edp-single-blinded-joinkeys" }
}

# EDP validates that the single-encrypted panelist identifiers are sufficiently
# similar to the previous execution's single-encrypted panelist identifiers.
steps {
  step_id: "validate-single-blinded-joinkeys"
  party: DATA_PROVIDER

  # Ensure there are are between 1000 and 10,000 panelists and 99% of them
  # appeared in the previous protocol.
  intersect_and_validate_step {
    max_size: 10000
    minimum_overlap: 0.99
  }

  input_labels { key: "previous-data" value: "edp-previous-single-blinded-joinkeys" }
  input_labels { key: "current-data" value: "edp-single-blinded-joinkeys" }

  # Outputs "current-data" as a local copy for long-term auditing storage.
  output_labels { key: "output" value: "edp-single-blinded-joinkeys-copy" }
}

# EDP wraps the single-encrypted panelist identifiers in another layer of
# commutative deterministic encryption.
steps {
  step_id: "double-blind"
  party: DATA_PROVIDER

  reencrypt_step {}

  input_labels { key: "data" value: "edp-single-blinded-joinkeys-copy" }
  input_labels { key: "crypto-key" value: "edp-commutative-deterministic-key" }

  output_labels { key: "output" value: "edp-double-blinded-joinkeys" }
}

steps {
  step_id: "export-double-blinded-joinkeys"
  party: DATA_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "double-blinded-joinkeys" value: "edp-double-blinded-joinkeys" }
  output_labels { key: "double-blinded-joinkeys" value: "double-blinded-joinkeys" }
}

steps {
  step_id: "import-double-blinded-joinkeys"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "double-blinded-joinkeys" value: "double-blinded-joinkeys" }
  output_labels { key: "double-blinded-joinkeys" value: "mp-double-blinded-joinkeys" }
}

# MP removes their layer of commutative, deterministic encryption.
steps {
  step_id: "prepare-lookup-keys"
  party: MODEL_PROVIDER

  decrypt_step {}

  input_labels { key: "crypto-key" value: "mp-commutative-deterministic-key" }
  input_labels { key: "data" value: "mp-double-blinded-joinkeys" }

  output_labels { key: "output" value: "mp-lookup-keys" }
}

# MP encrypts their queries.
steps {
  step_id: "prepare-event-lookup-queries"
  party: MODEL_PROVIDER

  build_private_membership_queries_step {
    serialized_parameters: "..."
  }

  input_labels { key: "identifiers" value: "mp-raw-joinkeys" }
  input_labels { key: "lookup-keys" value: "mp-lookup-keys" }

  output_labels { key: "serialized-rlwe-private-key" value: "mp-serialized-rlwe-private-key" }
  output_labels { key: "serialized-rlwe-public-key" value: "mp-serialized-rlwe-public-key" }
  output_labels { key: "query-decryption-keys" value: "mp-query-decryption-keys" }
  output_labels { key: "encrypted-queries" value: "mp-encrypted-queries" }
}

steps {
  step_id: "export-serialized-rlwe-public-key"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "serialized-rlwe-public-key" value: "mp-serialized-rlwe-public-key" }
  output_labels { key: "serialized-rlwe-public-key" value: "serialized-rlwe-public-key" }
}

steps {
  step_id: "import-serialized-rlwe-public-key"
  party: DATA_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "serialized-rlwe-public-key" value: "serialized-rlwe-public-key" }
  output_labels { key: "serialized-rlwe-public-key" value: "edp-serialized-rlwe-public-key" }
}

steps {
  step_id: "export-encrypted-queries"
  party: MODEL_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "encrypted-queries" value: "mp-encrypted-queries" }
  output_labels { key: "encrypted-queries" value: "encrypted-queries" }
}

steps {
  step_id: "import-encrypted-queries"
  party: DATA_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "encrypted-queries" value: "encrypted-queries" }
  output_labels { key: "encrypted-queries" value: "edp-encrypted-queries" }
}

# EDP executes private membership queries
steps {
  step_id: "execute-private-membership-queries"
  party: DATA_PROVIDER

  execute_private_membership_queries_step {
    serialized_parameters: "..."
  }

  input_labels { key: "event-data" value: "edp-event-data" }
  input_labels { key: "encrypted-queries" value: "edp-encrypted-queries" }
  input_labels { key: "serialized-rlwe-public-key" value: "edp-serialized-rlwe-public-key" }

  output_labels { key: "encrypted-results" value: "edp-encrypted-results" }
}

steps {
  step_id: "export-encrypted-results"
  party: DATA_PROVIDER

  copy_to_shared_storage_step {}

  input_labels { key: "encrypted-results" value: "edp-encrypted-results" }
  output_labels { key: "encrypted-results" value: "encrypted-results" }
}

steps {
  step_id: "import-encrypted-results"
  party: MODEL_PROVIDER

  copy_from_shared_storage_step {}

  input_labels { key: "encrypted-results" value: "encrypted-results" }
  output_labels { key: "encrypted-results" value: "mp-encrypted-results" }
}

# MP decrypts the results
steps {
  step_id: "decrypt-private-membership-results"
  party: MODEL_PROVIDER

  decrypt_private_membership_query_results_step {
    serialized_parameters: "..."
  }

  input_labels { key: "serialized-rlwe-private-key" value: "mp-serialized-rlwe-private-key" }
  input_labels { key: "serialized-rlwe-public-key" value: "mp-serialized-rlwe-public-key" }
  input_labels { key: "query-decryption-keys" value: "mp-query-decryption-keys" }
  input_labels { key: "encrypted-results" value: "mp-encrypted-results" }

  output_labels { key: "results" value: "results" }
}
