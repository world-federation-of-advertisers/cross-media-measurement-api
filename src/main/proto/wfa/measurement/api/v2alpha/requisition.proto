// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/any.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";
import "wfa/measurement/api/v2alpha/measurement.proto";
import "wfa/measurement/api/v2alpha/protocol_config.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionProto";

// A requisition for data across `EventGroup`s from a single `DataProvider`.
// Output-only.
//
// A `Requisition` is created on behalf of a `MeasurementConsumer` to instruct a
// `DataProvider` to collect and upload data necessary to compute a
// `Measurement` result.
message Requisition {
  option (google.api.resource) = {
    type: "halo.wfanet.org/Requisition"
    pattern: "dataProviders/{data_provider}/requisitions/{requisition}"
    pattern: "measurementConsumers/{measurement_consumer}/measurements/{measurement}/requisitions/{requisition}"
    singular: "requisition"
    plural: "requisitions"
  };

  // Resource name.
  //
  // Canonical format: dataProviders/{data_provider}/requisitions/{requisition}
  string name = 1;

  // Resource name of `Measurement` that this `Requisition` is associated with.
  string measurement = 2 [
    (google.api.resource_reference).type = "halo.wfanet.org/Measurement",
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized dereferenced `measurement_consumer_certificate` field from
  // `measurement.
  string measurement_consumer_certificate = 3 [
    (google.api.resource_reference).type = "halo.wfanet.org/Certificate",
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized `measurement_spec` field from `measurement`.
  SignedMessage measurement_spec = 4 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized `protocol_config` field from `measurement`.
  ProtocolConfig protocol_config = 5 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized `data_provider_certificate` field from the corresponding
  // `DataProviderEntry` in `measurement`.
  //
  // (--
  // TODO(world-federation-of-advertisers/cross-media-measurement-api#188):
  // Remove this once the certificate is always specified in
  // `FulfillDirectRequisitionRequest`. --)
  string data_provider_certificate = 6 [
    (google.api.resource_reference).type = "halo.wfanet.org/Certificate",
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized `data_provider_public_key` field from the corresponding
  // `DataProviderEntry` in `measurement`.
  google.protobuf.Any data_provider_public_key = 15 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized `data_provider_public_key` field with signature from the
  // corresponding `DataProviderEntry` in `measurement`.
  //
  // Deprecated: The `Measurement` may not have signature for this key. Use
  // `data_provider_public_key` instead.
  SignedMessage signed_data_provider_public_key = 7
      [(google.api.field_behavior) = OUTPUT_ONLY, deprecated = true];

  // Denormalized `encrypted_requisition_spec` field from the corresponding
  // `DataProviderEntry` in `measurement`.
  EncryptedMessage encrypted_requisition_spec = 14 [
    (google.api.field_behavior) = OUTPUT_ONLY,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Denormalized `encrypted_requisition_spec.ciphertext` from the corresponding
  // `DataProviderEntry` in `measurement`.
  //
  // Deprecated: Use `encrypted_requisition_spec`.
  bytes encrypted_requisition_spec_ciphertext = 8
      [(google.api.field_behavior) = OUTPUT_ONLY, deprecated = true];

  // Entry in the `duchies` map.
  message DuchyEntry {
    // Key of the map entry, which is a `Duchy` resource name.
    string key = 1 [
      (google.api.resource_reference).type = "halo.wfanet.org/Duchy",
      (google.api.field_behavior) = REQUIRED
    ];

    // Information for the Liquid Legions v2 protocols including Reach-Only.
    message LiquidLegionsV2 {
      // The `ElGamalPublicKey` generated by the `Duchy` for this `Requisition`.
      SignedMessage el_gamal_public_key = 1
          [(google.api.field_behavior) = REQUIRED];
    }

    // Value of a map entry.
    message Value {
      // Resource name of the `Certificate` belonging to the `Duchy`.
      //
      // This certificate can be used to verify signatures in `protocol`.
      string duchy_certificate = 1 [
        (google.api.resource_reference).type = "halo.wfanet.org/Certificate",
        (google.api.field_behavior) = REQUIRED
      ];

      // Protocol-specific information for the `Duchy`. Required.
      oneof protocol {
        // Information for the Liquid Legions v2 protocol.
        LiquidLegionsV2 liquid_legions_v2 = 2;

        // Information for the Reach-Only Liquid Legions v2 protocol.
        LiquidLegionsV2 reach_only_liquid_legions_v2 = 3;
      }
    }
    // Value of the map entry.
    Value value = 2 [(google.api.field_behavior) = REQUIRED];
  }
  // Map of `Duchy` name to parameters for that `Duchy`.
  repeated DuchyEntry duchies = 9 [
    (google.api.field_behavior) = UNORDERED_LIST,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // State of a `Requisition`.
  enum State {
    // Default value if state is omitted. Should never be used.
    STATE_UNSPECIFIED = 0;
    // The `Requisition` has not yet been fulfilled.
    UNFULFILLED = 1;
    // The `Requisition` has been fulfilled. Terminal state.
    FULFILLED = 2;
    // The `Requisition` has been refused by the `DataProvider`. Terminal state.
    //
    // `measurement` will be in the `FAILED` state.
    REFUSED = 3;
  }
  // The state of this `Requisition`.
  State state = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The `nonce` value from `encrypted_requisition_spec`. Output-only.
  //
  // Set when `state` is `FULFILLED`.
  //
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: This is a random 64-bit value. --)
  fixed64 nonce = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Refusal of a `Requisition`.
  message Refusal {
    // Justification for refusing to fulfill a `Requisition`.
    //
    // The number of values should be kept small and communicate only the
    // granularity necessary for automated downstream consumption and
    // statistics. Each value attempts to map to a specific stage of
    // `Requisition` handling by a `DataProvider`.
    enum Justification {
      // Default value if a `Justification` field has not been specified. Should
      // never be used.
      JUSTIFICATION_UNSPECIFIED = 0;

      // At least one cryptographic consent signal (digital signature or
      // encrypted value) in the `Requisition` is invalid.
      //
      // This means either that a digital signature cannot be verified using the
      // specified certificate or an encrypted value cannot be decrypted using
      // the specified key.
      CONSENT_SIGNAL_INVALID = 1;

      // The specification/configuration for the `Requisition` is invalid.
      //
      // For example, `encrypted_requisition_spec` includes an invalid
      // `google.type.Interval` (with `end_time` before `start_time`) or some
      // configuration that the `DataProvider` does not support.
      SPEC_INVALID = 2;

      // There is insufficient remaining privacy budget to fulfill the
      // `Requisition`.
      INSUFFICIENT_PRIVACY_BUDGET = 3;

      // The `Requisition` cannot be fulfilled by the `DataProvider` for a
      // reason that is not more clearly indicated by another `Justification`.
      //
      // This implies that the `DataProvider` *should* be able to fulfill the
      // `Requisition`, but something went irrecoverably wrong. For example, the
      // `DataProvider` encountered corruption of the underlying data.
      UNFULFILLABLE = 4;

      // The `DataProvider` has declined to fulfill this `Requisition`
      // regardless of whether any of the other `Justification` conditions
      // apply.
      DECLINED = 5;
    }
    // Justification for refusing to fulfill this `Requisition`.
    Justification justification = 1 [(google.api.field_behavior) = REQUIRED];

    // Human-readable string adding more context to the provided
    // `Justification`. This should NOT include sensitive information.
    //
    // Example: "Data Provider X does not support Virtual ID model line Y".
    string message = 2;
  }
  // The refusal that put this `Requisition` into the `REFUSED` state. Must be
  // set when `state` is `REFUSED`.
  Refusal refusal = 12;

  // Denormalized `state` field from `measurement`.
  Measurement.State measurement_state = 13
      [(google.api.field_behavior) = OUTPUT_ONLY];
}
