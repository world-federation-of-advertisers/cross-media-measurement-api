// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionProto";

// A requisition for data across `EventGroup`s from a single `DataProvider`.
// Output-only.
//
// A `Requisition` is created on behalf of a `MeasurementConsumer` to instruct a
// `DataProvider` to collect and upload data necessary to compute a
// `Measurement` result.
message Requisition {
  option (google.api.resource) = {
    type: "halo.wfanet.org/Requisition"
    pattern: "dataProviders/{data_provider}/requisitions/{requisition}"
  };

  // Resource name.
  string name = 1;

  // Resource name of `Measurement` that this `Requisition` is associated with.
  // Required. Immutable.
  string measurement = 2
      [(google.api.resource_reference).type = "halo.wfanet.org/Measurement"];

  // Denormalized dereferenced `measurement_consumer_certificate` field from
  // `measurement`. Required. Immutable.
  string measurement_consumer_certificate = 3
      [(google.api.resource_reference).type = "halo.wfanet.org/Certificate"];

  // Denormalized `measurement_spec` field from `measurement`. Required.
  // Immutable.
  SignedData measurement_spec = 4;

  // Denormalized `protocol_config` field from `measurement`. Required.
  // Immutable.
  string protocol_config = 5
      [(google.api.resource_reference).type = "halo.wfanet.org/ProtocolConfig"];

  // Denormalized `data_provider_certificate` field from the corresponding
  // `DataProviderEntry` in `measurement`.  Required. Immutable.
  string data_provider_certificate = 6
      [(google.api.resource_reference).type = "halo.wfanet.org/Certificate"];

  // Denormalized `data_provider_public_key` field from the corresponding
  // `DataProviderEntry` in `measurement`.  Required. Immutable.
  SignedData data_provider_public_key = 7;

  // Denormalized `encrypted_requisition_spec` field from the corresponding
  // `DataProviderEntry` in `measurement`.  Required. Immutable.
  bytes encrypted_requisition_spec = 8;

  message DuchyEntry {
    // Key of the map entry, which is a `Duchy` resource name. Required.
    string key = 1
        [(google.api.resource_reference).type = "halo.wfanet.org/Duchy"];

    message LiquidLegionsV2 {
      // The `ElGamalPublicKey` generated by the `Duchy` for this `Requisition`.
      // Required.
      SignedData el_gamal_public_key = 1;
    }

    message Value {
      // Resource name of the `Certificate` belonging to the `Duchy`. Required.
      //
      // This certificate can be used to verify signatures in `protocol`.
      string duchy_certificate = 1 [(google.api.resource_reference).type =
                                        "halo.wfanet.org/Certificate"];

      // Protocol-specific information for the `Duchy`. Required.
      oneof protocol {
        LiquidLegionsV2 liquid_legions_v2 = 2;
      }
    }
    // Value of the map entry. Required.
    Value value = 2;
  }
  // Map of `Duchy` name to parameters for that `Duchy`. Required. Immutable.
  repeated DuchyEntry duchies = 9;

  // State of a `Requisition`.
  enum State {
    // Default value if state is omitted. Should never be used.
    STATE_UNSPECIFIED = 0;
    // The `Requisition` has not yet been fulfilled.
    UNFULFILLED = 1;
    // The `Requisition` has been fulfilled. Terminal state.
    FULFILLED = 2;
    // The `Requisition` has been refused by the `DataProvider`. Terminal state.
    //
    // `measurement` will be in the `FAILED` state.
    REFUSED = 3;
  }
  // The state of this `Requisition`.
  State state = 10;

  // Cryptographic digital signature of the "requisition fingerprint" which
  // can be verified using the `data_provider_certificate`. Only set if `state`
  // is `FULFILLED`.
  //
  // The requisition fingerprint is defined as the concatenation of:
  // 1. The SHA256 hash of `encrypted_requisition_spec`.
  // 2. `data_provider_list_hash` from `encrypted_requisition_spec`.
  // 3. `data` from `measurement_spec`.
  bytes data_provider_participation_signature = 11;

  message Refusal {
    // Justification for refusing to fulfill a `Requisition`.
    //
    // The number of values should be kept small and communicate only the
    // granularity necessary for automated downstream consumption and
    // statistics. Each value attempts to map to a specific stage of
    // `Requisition` handling by a `DataProvider`.
    enum Justification {
      // Default value if a `Justification` field has not been specified. Should
      // never be used.
      JUSTIFICATION_UNSPECIFIED = 0;

      // At least one cryptographic consent signal (digital signature or
      // encrypted value) in the `Requisition` is invalid.
      //
      // This means either that a digital signature cannot be verified using the
      // specified certificate or an encrypted value cannot be decrypted using
      // the specified key.
      CONSENT_SIGNAL_INVALID = 1;

      // The specification/configuration for the `Requisition` is invalid.
      //
      // For example, `encrypted_requisition_spec` includes an invalid
      // `TimeInterval` (with `end_time` before `start_time`) or some
      // configuration that the `DataProvider` does not support.
      SPECIFICATION_INVALID = 2;

      // There is insufficient remaining privacy budget to fulfill the
      // `Requisition`.
      INSUFFICIENT_PRIVACY_BUDGET = 3;

      // The `Requisition` cannot be fulfilled by the `DataProvider` for a
      // reason that is not more clearly indicated by another `Justification`.
      //
      // This implies that the `DataProvider` *should* be able to fulfill the
      // `Requisition`, but something went irrecoverably wrong. For example, the
      // `DataProvider` encountered corruption of the underlying data.
      UNFULFILLABLE = 4;

      // The `DataProvider` has declined to fulfill this `Requisition`
      // regardless of whether any of the other `Justification` conditions
      // apply.
      DECLINED = 5;
    }
    // Justification for refusing to fulfill this `Requisition`. Required.
    Justification justification = 1;

    // Human-readable string adding more context to the provided
    // `Justification`. This should NOT include sensitive information.
    //
    // Example: "Data Provider X does not support Virtual ID model line Y".
    string message = 2;
  }
  // The refusal that put this `Requisition` into the `REFUSED` state. Must be
  // set when `state` is `REFUSED`.
  Refusal refusal = 12;
}
