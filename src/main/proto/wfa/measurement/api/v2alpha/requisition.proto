// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/crypto.proto";
import "wfa/measurement/api/v2alpha/data_provider.proto";
import "wfa/measurement/api/v2alpha/duchy.proto";
import "wfa/measurement/api/v2alpha/measurement.proto";
import "wfa/measurement/api/v2alpha/measurement_consumer.proto";
import "wfa/measurement/api/v2alpha/protocol_config.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionProto";

// A requisition for data across `EventGroup`s from a single `DataProvider`.
// Output-only.
//
// A `Requisition` is created on behalf of a `MeasurementConsumer` to instruct a
// `DataProvider` to collect and upload data necessary to compute a
// `Measurement` result.
message Requisition {
  message Key {
    string data_provider_id = 1;
    string requisition_id = 2;
  }
  // Resource key.
  Key key = 1;

  // Resource key of `Measurement` that this `Requisition` is associated with.
  // Required. Immutable.
  Measurement.Key measurement = 2;

  // Denormalized dereferenced `measurement_consumer_certificate` field from
  // `measurement`. Required. Immutable.
  MeasurementConsumerCertificate measurement_consumer_certificate = 3;

  // Denormalized `measurement_spec` field from `measurement`. Required.
  // Immutable.
  SignedData measurement_spec = 4;

  // Denormalized `protocol_config` field from `measurement`. Required.
  // Immutable.
  ProtocolConfig.Key protocol_config = 5;

  // Denormalized `data_provider_certificate` field from the corresponding
  // `DataProviderEntry` in `measurement`.  Required. Immutable.
  DataProviderCertificate.Key data_provider_certificate = 6;

  // Denormalized `data_provider_public_key` field from the corresponding
  // `DataProviderEntry` in `measurement`.  Required. Immutable.
  SignedData data_provider_public_key = 7;

  // Denormalized `encrypted_requisition_spec` field from the corresponding
  // `DataProviderEntry` in `measurement`.  Required. Immutable.
  bytes encrypted_requisition_spec = 8;

  message DuchyEntry {
    // Resource key of the `Duchy` that this entry is for. Required. Immutable.
    Duchy.Key duchy = 1;

    // Resource key of the `DuchyCertificate` for this entry. Required.
    // Immutable.
    DuchyCertificate.Key duchy_certificate = 2;

    // The `ElGamalPublicKey` generated by the `Duchy` for this `Requisition`,
    // which can be verified using `duchy_certificate`. Required. Immutable.
    SignedData el_gamal_public_key = 3;
  }
  // The  entry for each `Duchy`. This can be logically represented as a map
  // uniquely keyed by `Duchy.Key`. Required. Immutable.
  repeated DuchyEntry duchy_entries = 9;

  // State of a `Requisition`.
  enum State {
    // Default value if state is omitted. Should never be used.
    STATE_UNSPECIFIED = 0;
    // The `Requisition` has not yet been fulfilled.
    UNFULFILLED = 1;
    // The `Requisition` has been fulfilled. Terminal state.
    FULFILLED = 2;
    // The `Requisition` has been refused by the `DataProvider`. Terminal state.
    //
    // `measurement` will be in the `FAILED` state.
    REFUSED = 3;
  }
  // The state of this `Requisition`.
  State state = 10;

  // Cryptographic digital signature of the "requisition fingerprint" which
  // can be verified using the `data_provider_certificate`. Only set if `state`
  // is `FULFILLED`.
  //
  // The requisition fingerprint is defined as the concatenation of:
  // 1. The SHA256 hash of `encrypted_requisition_spec`.
  // 2. `data_provider_list_hash` from `encrypted_requisition_spec`.
  // 3. `data` from `measurement_spec`.
  bytes data_provider_participation_signature = 11;

  message Refusal {
    enum Justification {
      JUSTIFICATION_UNSPECIFIED = 0;

      // The `EventGroup` is not known to the `DataProvider`. This should only
      // happen if the corresponding event group in the `DataProvider`'s system
      // previously existed but has been deleted.
      UNKNOWN_EVENT_GROUP = 1;

      // The `MeasurementSpec` specifies a configuration that the
      // `DataProvider` does not and will never support for this `EventGroup`.
      MEASUREMENT_SPEC_UNSUPPORTED = 2;

      // The collection interval covers a range that is sufficiently long ago
      // that the DataProvider no longer retains the underlying data.
      COLLECTION_INTERVAL_TOO_DISTANT = 3;

      // Validation of the `measurement_spec` or `encrypted_requisition_spec`
      // signature failed.
      SIGNATURE_INVALID = 4;

      // There is insufficient remaining privacy budget to fulfill this
      // `Requisition`.
      INSUFFICIENT_PRIVACY_BUDGET = 5;

      // The `DataProvider` has declined to fulfill this `Requisition`. The data
      // required to fulfill this request may or may not be available.
      DECLINED = 6;

      // The data required to fulfill this `Requisition` is inaccessible or
      // lost. This should only be used when there is no other `Justification`
      // that is more specific.
      DATA_UNAVAILABLE = 7;
    }
    Justification justification = 1;

    // Human-readable string adding more context to the provided
    // `Justification`. This should NOT include sensitive information.
    //
    // Example: "Data Provider X does not support Virtual ID model line Y".
    string message = 2;
  }
  // The refusal that put this `Requisition` into the `REFUSED` state.
  Refusal refusal = 12;
}
