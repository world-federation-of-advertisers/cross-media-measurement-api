// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "EventGroupProto";

// A grouping of events defined by a `DataProvider`. For example, a single
// campaign or creative defined in a publisher's ad system.
message EventGroup {
  option (google.api.resource) = {
    type: "halo.wfanet.org/EventGroup"
    pattern: "dataProviders/{data_provider}/eventGroups/{event_group}"
  };

  // Resource name.
  string name = 1;

  // Resource name of the `MeasurementConsumer` associated with this
  // `EventGroup`. Required. Immutable.
  string measurement_consumer = 2 [(google.api.resource_reference).type =
                                       "halo.wfanet.org/MeasurementConsumer"];

  // Resource name of the `Certificate` belonging to `measurement_consumer`.
  // Must be set if `measurement_consumer_public_key` is set.
  string measurement_consumer_certificate = 3
      [(google.api.resource_reference).type = "halo.wfanet.org/Certificate"];

  // Pre-shared serialized `EncryptionPublicKey`, which can be verified using
  // `measurement_consumer_certificate`. Must be set if `encrypted_metadata` is
  // set.
  SignedData measurement_consumer_public_key = 4;

  // ID referencing the `EventGroup` in an external system, provided by the
  // `DataProvider`.
  //
  // If set, this value must be unique among `EventGroup`s for the parent
  // `DataProvider`.
  string event_group_reference_id = 5;

  // The set of VID model lines used to label events in this `EventGroup`.
  // Required.
  repeated string vid_model_lines = 6;

  message EventTemplate {
    // The type of the Event Template. A fully-qualified protobuf message type.
    // Required.
    string type = 1;
  }

  // The `EventTemplate`s that events associated with this `EventGroup` conform
  // to.
  repeated EventTemplate event_templates = 7;

  // Wrapper for per-EDP Event Group metadata.
  // TODO(robinsonsc): Complete design for metadata registration and update.
  message Metadata {}

  // Encrypted serialized `Metadata`. The encryption uses
  // `measurement_consumer_public_key` as the recipient public key.
  bytes encrypted_metadata = 8;
}
