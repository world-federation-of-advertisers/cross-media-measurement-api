// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/any.proto";
import "google/type/interval.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "EventGroupProto";

// A grouping of events defined by a `DataProvider`. For example, a single
// campaign or creative defined in a publisher's ad system.
message EventGroup {
  option (google.api.resource) = {
    type: "halo.wfanet.org/EventGroup"
    pattern: "dataProviders/{data_provider}/eventGroups/{event_group}"
    pattern: "measurementConsumers/{measurement_consumer}/eventGroups/{event_group}"
    singular: "eventGroup"
    plural: "eventGroups"
  };

  reserved 8;

  // Resource name.
  //
  // Canonical format: dataProviders/{data_provider}/eventGroups/{event_group}
  string name = 1;

  // Resource name of the `MeasurementConsumer` associated with this
  // `EventGroup`.
  string measurement_consumer = 2 [
    (google.api.resource_reference).type =
        "halo.wfanet.org/MeasurementConsumer",
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Resource name of the `Certificate` belonging to `measurement_consumer`.
  // Must be set if `measurement_consumer_public_key` is set.
  string measurement_consumer_certificate = 3
      [(google.api.resource_reference).type = "halo.wfanet.org/Certificate"];

  // Pre-shared serialized `EncryptionPublicKey`, which can be verified using
  // `measurement_consumer_certificate`. Must be set if `encrypted_metadata` is
  // set.
  //
  // The version of the `EncryptionPublicKey` message must match the API version
  // used to last update this resource.
  //
  // (-- TODO(@SanjayVas): Include the `message` directly rather than
  // wrapping it in a `SignedMessage`. The signature is not needed here, as
  // the `DataProvider` should have already verified it. --)
  SignedMessage measurement_consumer_public_key = 4;

  // ID referencing the `EventGroup` in an external system, provided by the
  // `DataProvider`.
  string event_group_reference_id = 5;

  // The set of VID model lines used to label events in this `EventGroup`.
  repeated string vid_model_lines = 6 [
    (google.api.resource_reference).type = "halo.wfanet.org/ModelLine",
    (google.api.field_behavior) = UNORDERED_LIST
  ];

  // Template for an event message.
  message EventTemplate {
    // The type of the Event Template. A fully-qualified protobuf message type.
    string type = 1 [(google.api.field_behavior) = REQUIRED];
  }

  // The `EventTemplate`s that events associated with this `EventGroup` conform
  // to.
  repeated EventTemplate event_templates = 7
      [(google.api.field_behavior) = UNORDERED_LIST];

  // Wrapper for per-EDP EventGroup metadata.
  message Metadata {
    // The resource name of the metadata descriptor.
    string event_group_metadata_descriptor = 1 [
      (google.api.resource_reference).type =
          "halo.wfanet.org/EventGroupMetadataDescriptor",
      (google.api.field_behavior) = REQUIRED
    ];

    // A message of a type described by the descriptor along with its type URL,
    // encoded as an `Any` message.
    //
    // See https://protobuf.dev/programming-guides/techniques/#self-description
    google.protobuf.Any metadata = 2 [(google.api.field_behavior) = REQUIRED];
  }

  // `Metadata` encrypted using the `measurement_consumer_public_key` as the
  // recipient public key.
  //
  // The version of the `Metadata` message type must match the API version used
  // to last update this resource.
  EncryptedMessage encrypted_metadata = 10;

  // Possible states of Event Group.
  enum State {
    // The default value if state is omitted. Should not be used
    STATE_UNSPECIFIED = 0;
    // The Event Group has been created
    ACTIVE = 1;
    // The Event Group has been deleted. An Event Group in a DELETED state will
    // have all mutable optional fields cleared. This state is terminal.
    DELETED = 2;
  }
  // Event Group state.
  State state = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Interval for when data for this `EventGroup` is guaranteed to be available
  // for a `Requisition`.
  //
  // The parent `data_availability_interval` defines the upper and lower bounds
  // for when data is guaranteed to be available.
  //
  // This field will be required in a future release. Until then, if this is not
  // set, data is not guaranteed to be available.
  //
  // If this is set, then `start_time` is required and the data is guaranteed to
  // be available for the interval that defines the overlap between this and the
  // parent `data_availability_interval`.
  google.type.Interval data_availability_interval = 11;
}
