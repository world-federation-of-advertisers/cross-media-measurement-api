// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ExchangeWorkflowProto";

// A generic panel matching workflow. Many different pairs of parties may use
// the same ExchangeWorkflow.
//
// See docs/panelmatch/example-exchange-workflow.textproto for an example
// ExchangeWorkflow.
message ExchangeWorkflow {
  // The type of participant that executes each step.
  enum Party {
    PARTY_UNSPECIFIED = 0;
    MODEL_PROVIDER = 1;
    DATA_PROVIDER = 2;
  }

  // Building blocks of the ExchangeWorkflow.
  message Step {
    // Identifier unique in the ExchangeWorkflow.
    string step_id = 1;

    // The party that should execute this step.
    Party party = 2;

    // Each step expects some inputs of certain names. This is a map from
    // the step-specific name to a label for the input. The step is ready to run
    // when, for each input label, there is a completed step with the same
    // output label.
    //
    // Inputs to the protocol are provided via InputStep step types -- this
    // ensures that all inputs to all steps appear as some output label.
    map<string, string> input_labels = 3;
    map<string, string> output_labels = 4;

    // Compares the inputs to determine if they overlap sufficiently.
    message IntersectAndValidateStep {
      // The maximum number of items in to allow.
      int64 max_size = 3;

      // The minimum fraction of items that must exist in both input data sets.
      float minimum_overlap = 4;
    }

    // Selects a subset of key-value pairs.
    message TableQueryStep {}

    // Applies deterministic, commutative encryption to the input data.
    message EncryptAndShareStep {
      enum InputFormat {
        INPUT_FORMAT_UNSPECIFIED = 0;
        PLAINTEXT = 1;   // For initial encryption
        CIPHERTEXT = 2;  // For double-encryption
      }
      InputFormat input_format = 1;
    }

    // Removes a layer of deterministic, commutative encryption from the input.
    message DecryptStep {}

    // Represents an input to the protocol derived from some unknown process by
    // the `party`.
    //
    // These steps are used as placeholders to allow parties to signal when
    // their inputs are ready.
    message InputStep {}

    oneof step {
      IntersectAndValidateStep intersect_and_validate = 5;
      TableQueryStep table_query = 6;
      EncryptAndShareStep encrypt_and_share = 7;
      DecryptStep decrypt = 8;
      InputStep input = 9;
    }
  }
  // Sequence of steps of the workflow.
  repeated Step steps = 1;
}
