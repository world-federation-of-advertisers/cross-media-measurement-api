// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/event_group.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "EventGroupsServiceProto";

// Service for interacting with `EventGroup` resources.
service EventGroups {
  // Returns the `EventGroup` with the specified resource key.
  rpc GetEventGroup(GetEventGroupRequest) returns (EventGroup) {}

  // Creates (registers) a `EventGroup` defined in the specified
  // `DataProvider`'s system.
  rpc CreateEventGroup(CreateEventGroupRequest) returns (EventGroup) {}

  // Updates an existing `EventGroup`. Results in a `PERMISSION_DENIED` error if
  // the authenticated user does not have access to the `EventGroup`. Results in
  // a `NOT_FOUND` error if the the specified `EventGroup` does not exist.
  rpc UpdateEventGroup(UpdateEventGroupRequest) returns (EventGroup) {}

  // Deletes an existing `EventGroup`. `EventGroup` will transition to a DELETED
  // state and will have all of its mutable optional fields cleared. This action
  // is irreversible. Results in a `PERMISSION_DENIED` error if the
  // authenticated user does not have access to the `EventGroup`. Results in a
  // `NOT_FOUND` error if the the specified `EventGroup` does not exist.
  rpc DeleteEventGroup(DeleteEventGroupRequest) returns (EventGroup) {}

  // Lists `EventGroup`s. Results in a `PERMISSION_DENIED` error if attempting
  // to list `EventGroup`s that the authenticated user does not have access to.
  rpc ListEventGroups(ListEventGroupsRequest)
      returns (ListEventGroupsResponse) {}
}

// Request message for `GetEventGroup` method.
message GetEventGroupRequest {
  // Resource name.
  string name = 1
      [(google.api.resource_reference).type = "halo.wfanet.org/EventGroup"];
}

// Request message for `CreateEventGroup` method.
message CreateEventGroupRequest {
  // Resource name of the parent `DataProvider`. Required.
  string parent = 1
      [(google.api.resource_reference).type = "halo.wfanet.org/DataProvider"];

  // The `EventGroup` to create. Required.
  //
  // The `key` field will be ignored, and the system will assign an ID. Results
  // in an `ALREADY_EXISTS` error if there is already a child `EventGroup` with
  // the same `event_group_reference_id`.
  EventGroup event_group = 2;
}

// Request message for `UpdateEventGroup` method.
message UpdateEventGroupRequest {
  // The `EventGroup` to update. Required.
  EventGroup event_group = 1;
}

message DeleteEventGroupRequest {
  // The name of `EventGroup` to delete. Required.
  // Format: dataProviders/{dataProvider}/eventGroups/{eventGroup}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference).type = "halo.wfanet.org/EventGroup"
  ];
}

message ListEventGroupsRequest {
  // Resource key of the parent `DataProvider`. The wildcard ID (`-`) may be
  // used in place of the `DataProvider` ID to list across `DataProvider`s, in
  // which case a filter should be specified.
  string parent = 1
      [(google.api.resource_reference).type = "halo.wfanet.org/DataProvider"];

  // The maximum number of resources to return. See https://aip.dev/158.
  int32 page_size = 2;
  // A token from a previous call, specified to retrieve the next page. See
  // https://aip.dev/158.
  string page_token = 3;

  // Filter criteria. Repeated fields are treated as logical ORs, and multiple
  // fields specified as logical ANDs.
  message Filter {
    repeated string measurement_consumers = 1
        [(google.api.resource_reference).type =
             "halo.wfanet.org/MeasurementConsumer"];
  }
  // Result filter.
  Filter filter = 4;

  // Whether to include EventGroups in the DELETED state.
  bool show_deleted = 5;
}

message ListEventGroupsResponse {
  // The `EventGroup` resources.
  repeated EventGroup event_groups = 1;

  // A token that can be specified in a subsequent call to retrieve the next
  // page. See https://aip.dev/158.
  string next_page_token = 2;
}
