// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/account.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "DataProviderProto";

// A provider of event (e.g. impression) data. For example, a publisher or panel
// provider.
message DataProvider {
  message Key {
    string data_provider_id = 1;
  }
  // Resource key.
  Key key = 1;

  // The *preferred* X.509 certificate belonging to this `DataProvider` in DER
  // format. Required.
  bytes preferred_certificate = 2;

  // Resource key of the *preferred* `DataProviderCertificate` belonging to this
  // `DataProvider`. Output-only.
  //
  // The `certificate` field of this resource matches `preferred_certificate`.
  DataProviderCertificate.Key preferred_data_provider_certificate = 3;

  // Serialized `EncryptionPublicKey` for this `DataProvider`, which can be
  // verified using `preferred_certificate`. Required.
  SignedData public_key = 4;

  // Display name of the data provider.
  string display_name = 5;

  // Resource keys of owner `Account`s. Output-only.
  repeated Account.Key owners = 6;
}

message DataProviderCertificate {
  message Key {
    // ID of the parent `DataProvider`.
    string data_provider_id = 1;
    // ID of this `DataProviderCertificate`.
    string data_provider_certificate_id = 2;
  }
  // Resource key.
  Key key = 1;

  // X.509 certificate in DER format which can be verified using the
  // `DataProvider`'s root certificate. Required. Immutable.
  bytes certificate = 2;
}

// Encryption public key for the `DataProvider`. Singleton resource.
message DataProviderPublicKey {
  // Resource key.
  DataProvider.Key key = 1;

  // Serialized `EncryptionPublicKey` for this `DataProvider`, which can be
  // verified using `data_provider_certificate`. Required.
  SignedData public_key = 2;

  // Resource key of the `DataProviderCertificate` that can be used to verify
  // `public_key`. Required.
  DataProviderCertificate.Key data_provider_certificate = 3;
}

// Wrapper for a list of `DataProvider` resource keys.
message DataProviderList {
  repeated DataProvider.Key data_provider = 1;
}
