// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/exchange_workflow.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ExchangeStepProto";

// API resource representing an ExchangeWorkflow.Step for a particular Exchange.
message ExchangeStep {
  message Key {
    string recurring_exchange_id = 1;
    string exchange_id = 2;
    string exchange_step_id = 3;
  }

  // Resource key.
  Key key = 1;

  // Output-only.
  State state = 2;

  // Denotes the step of the grandparent RecurringExchange's ExchangeWorkflow
  // that this ExchangeStep corresponds to. Output-only.
  ExchangeWorkflow.Step step = 3;

  // Output-only. Once predecessor steps complete, this will contain an entry
  // for each `step.input_labels` entry produced by the other party. The keys
  // here are the values of that map.
  map<string, SharedData> inputs = 4;

  // Output-only. This will be populated only if `state` is `SUCCEEDED`.
  // The keys of `outputs` are the subset of values of `step.output_labels`
  // that are also values of `input_labels` of some `ExchangeWorkflow.Step` to
  // be executed by the other party.
  //
  // Intuitively, these are the output labels that that other party needs to
  // access.
  map<string, SharedData> outputs = 5;

  enum State {
    STATE_UNSPECIFIED = 0;

    // Some predecessor ExchangeStep is not in state SUCCEEDED.
    BLOCKED = 1;

    // All predecessor ExchangeSteps are in state `SUCCEEDED` and there are no
    // associated ExchangeStepAttempts.
    READY = 2;

    // All predecessor ExchangeSteps are in state `SUCCEEDED` and there is at
    // least one associated ExchangeStepAttempt and all associated
    // ExchangeStepAttempts are in state `FAILED`.
    READY_FOR_RETRY = 3;

    // All predecessor ExchangeSteps are in state `SUCCEEDED` and an associated
    // ExchangeStepAttempt is in state `ACTIVE`.
    IN_PROGRESS = 4;

    // The step has succeeded. Terminal state. This implies that an associated
    // ExchangeStepAttempt is in state `SUCCEEDED`.
    SUCCEEDED = 5;

    // The step has permanently failed. Terminal state. This implies that an
    // associated ExchangeStepAttempt is in state `FAILED_STEP`.
    FAILED = 6;
  }

  // Represents how to access an output/input.
  message SharedData {
    // Encrypted, serialized `SignedData` messages containing serialized
    // `Location` payloads.
    bytes encrypted_signed_location = 1;

    // TODO(@efoxepstein): refactor to use a resource URI or something generic.
    message Location {
      // This should correspond to one of the values in the
      // `ExchangeWorkflow.Step.output_labels` map for a step.
      string label = 1;

      oneof location {
        // Represents a file to download over HTTPS. Since SharedOutput is only
        // shared via an encrypted SignedData message, it is safe to put URLs
        // with access tokens in here.
        string https_uri = 2;

        // Represents a query to execute under Google Cloud's BigQuery.
        // The exact details are TBD but this may end up being the name of an
        // AuthorizedView from which all rows should be read.
        string google_big_query = 3;

        // Represents a file accessible via Google Cloud Storage. While
        // sometime HTTPS can be used directly, some may prefer to use ACLs
        // rather than access tokens. This should be a standard GCS path of the
        // format "gcs://bucket-name/and/some/path".
        string google_cloud_storage = 4;

        // Represents a file accessible via AWS S3. While sometimes HTTPS can be
        // used directly, some may prefer to use ACLs rather than access tokens.
        // This should be a standard S3 path of the format
        // "s3://bucket-name/and/some/path".
        string amazon_s3 = 5;
      }
    }
  }
}
