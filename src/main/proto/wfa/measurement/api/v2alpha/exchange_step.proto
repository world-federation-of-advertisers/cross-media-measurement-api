// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ExchangeStepProto";

// API resource representing an ExchangeWorkflow.Step for a particular Exchange.
message ExchangeStep {
  option (google.api.resource) = {
    type: "halo.wfanet.org/ExchangeStep"
    pattern: "recurringExchanges/{recurring_exchange}/exchanges/{exchange}/steps/{exchange_step}"
  };

  // Resource name.
  string name = 1;

  // Output-only.
  State state = 2;

  // Serialized ExchangeWorkflow that this ExchangeStep corresponds to.
  SignedData signed_exchange_workflow = 3;

  // Current index of the step inside the signed_exchange_workflow.
  int32 step_index = 4;

  // Output-only.
  //
  // Once predecessor steps complete, this will contain an entry for each
  // `step.input_labels` entry produced by the other party.
  //
  // The keys of this map are the values of the `step.input_labels` map.
  //
  // The values of this map are serialized SignedData. Each SignedData's payload
  // is a byte string of concatenated encrypted values of uniform length.
  //
  // When ExchangeStepAttempts are completed successfully,
  // `/ExchangeStepAttempts.FinishExchangeStepAttempt` is provided
  // with outputs via its `shared_outputs` field. To populate this field, all of
  // the shared_outputs are (logically) aggregated into one map, and then
  // `shared_inputs` is the subset of that map consisting of labels from
  // `step.input_labels`.
  map<string, bytes> shared_inputs = 5;

  enum State {
    STATE_UNSPECIFIED = 0;

    // Some predecessor ExchangeStep is not in state SUCCEEDED.
    BLOCKED = 1;

    // All predecessor ExchangeSteps are in state `SUCCEEDED` and there are no
    // associated ExchangeStepAttempts.
    READY = 2;

    // All predecessor ExchangeSteps are in state `SUCCEEDED` and there is at
    // least one associated ExchangeStepAttempt and all associated
    // ExchangeStepAttempts are in state `FAILED`.
    READY_FOR_RETRY = 3;

    // All predecessor ExchangeSteps are in state `SUCCEEDED` and an associated
    // ExchangeStepAttempt is in state `ACTIVE`.
    IN_PROGRESS = 4;

    // The step has succeeded. Terminal state. This implies that an associated
    // ExchangeStepAttempt is in state `SUCCEEDED`.
    SUCCEEDED = 5;

    // The step has permanently failed. Terminal state. This implies that an
    // associated ExchangeStepAttempt is in state `FAILED_STEP`.
    FAILED = 6;
  }
}
