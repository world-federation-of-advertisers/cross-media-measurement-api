// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/type/interval.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionSpecProto";

// Specification for a `Requisition` which can be cryptographically signed.
// Immutable.
message RequisitionSpec {
  // Filter to apply to events.
  message EventFilter {
    // Raw CEL expression that is applied to a message which has a field for
    // each event template.
    string expression = 1;
  }
  // Entry for `event_groups` map.
  message EventGroupEntry {
    // Key of the map entry, which is an `EventGroup` resource name.
    string key = 1 [
      (google.api.resource_reference).type = "halo.wfanet.org/EventGroup",
      (google.api.field_behavior) = REQUIRED
    ];

    // Value of an `EventGroupEntry`.
    message Value {
      // Time interval over which the event data should be collected.
      //
      // Both `start_time` and `end_time` must be specified.
      google.type.Interval collection_interval = 1
          [(google.api.field_behavior) = REQUIRED];

      // Filter to apply to events. If not specified then all events will be
      // matched.
      EventFilter filter = 2;
    }
    // Value of this `EventGroupEntry`.
    Value value = 2 [(google.api.field_behavior) = REQUIRED];
  }
  // Map of `EventGroup` name to parameters for that `EventGroup`.
  //
  // All of the `EventGroup`s must belong to the same parent `DataProvider`
  // as this `Requisition`.
  repeated EventGroupEntry event_groups = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Serialized `EncryptionPublicKey` for the `Measurement` that this
  // `RequisitionSpec` is associated with.
  //
  // This is serialized so it can be easily compared with the same field in
  // `MeasurementSpec`.
  bytes measurement_public_key = 2 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // Non-zero cryptographic nonce for this `RequisitionSpec`.
  // (-- api-linter: core::0141::forbidden-types=disabled
  //     aip.dev/not-precedent: This is a random 64-bit value. --)
  fixed64 nonce = 3 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];
}
