// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/time_interval.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionSpecProto";

// Specification for a `Requisition` which can be cryptographically signed.
// Immutable.
message RequisitionSpec {
  // Filter to apply to events.
  message EventFilter {
    // Raw CEL expression that is applied to a message which has a field for
    // each event template.
    string expression = 1;
  }
  message EventGroupEntry {
    // Key of the map entry, which is an `EventGroup` resource name. Required.
    string key = 1
        [(google.api.resource_reference).type = "halo.wfanet.org/EventGroup"];

    message Value {
      // Time interval over which the event data should be collected. Required.
      TimeInterval collection_interval = 1;

      // Optional filter to apply to events.
      EventFilter filter = 2;
    }
    // Value of the map entry. Required.
    Value value = 2;
  }
  // Map of `EventGroup` name to parameters for that `EventGroup`. Required.
  //
  // All of the `EventGroup`s must belong to the same parent `DataProvider`
  // as this `Requisition`.
  repeated EventGroupEntry event_groups = 1;

  // Serialized `EncryptionPublicKey` for the `Measurement` that this
  // `RequisitionSpec` is associated with. Required.
  //
  // This is serialized so it can be easily compared with the same field in
  // `MeasurementSpec`.
  bytes measurement_public_key = 2;

  // Non-zero cryptographic nonce for this `RequisitionSpec`. Required.
  fixed64 nonce = 3;
}
