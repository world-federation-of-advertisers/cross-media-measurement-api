// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MeasurementProto";

message Measurement {
  option (google.api.resource) = {
    type: "halo.wfanet.org/Measurement"
    pattern: "measurementConsumers/{measurement_consumer}/measurements/{measurement}"
  };

  // Resource name.
  string name = 1;

  // Resource name of the `Certificate` belonging to the parent
  // `MeasurementConsumer`. Required. Immutable.
  string measurement_consumer_certificate = 2
      [(google.api.resource_reference).type = "halo.wfanet.org/Certificate"];

  // Serialized `MeasurementSpec` for requisitions, which can be verified using
  // `measurement_consumer_certificate`. Required. Immutable.
  SignedData measurement_spec = 3;

  // Serialized `DataProviderList` message containing the same `DataProvider`
  // resource keys as `data_provider_entries`. The order of the entries does not
  // matter. Required. Immutable.
  //
  // This is included as a separate field to provide a canonical serialization
  // for hashing, as the protocol buffer binary encoding specification does not
  // provide a deterministic serialization.
  bytes serialized_data_provider_list = 4;

  // A cryptographic salt for this `Measurement` that's used when computing the
  // SHA256 hash of `serialized_data_provider_list`. Required. Immutable.
  //
  // A randomly-generated 32-byte value should be ample.
  bytes data_provider_list_salt = 5;

  // TODO(b/175707034): Consider adding a field to hold the private keys which
  // is encrypted with some private/symmetric key belonging to the
  // `MeasurementConsumer`. This way the `MeasurementConsumer` need not store
  // the private keys for each `Measurement`.

  message DataProviderEntry {
    // Key of the map entry, which is a `DataProvider` resource name. Required.
    string key = 1
        [(google.api.resource_reference).type = "halo.wfanet.org/DataProvider"];

    message Value {
      // Resource key of the `Certificate` belonging to `data_provider`.
      // Required.
      string data_provider_certificate = 1
          [(google.api.resource_reference).type =
               "halo.wfanet.org/Certificate"];

      // Pre-shared serialized `EncryptionPublicKey`, which can be verified
      // using `data_provider_certificate`. Required.
      SignedData data_provider_public_key = 2;

      // Encrypted `SignedData` containing the serialized `RequisitionSpec` for
      // this entry, which can be verified using
      // `measurement_consumer_certificate`. Required.
      //
      // The encryption uses the `cipher_suite` specified in `measurement_spec`,
      // with `data_provider_public_key` as the recipient public key.
      bytes encrypted_requisition_spec = 3;
    }
    // Value of the map entry. Required.
    Value value = 2;
  }
  // Map of `DataProvider` name to parameters for that `DataProvider`. Required.
  // Immutable.
  repeated DataProviderEntry data_providers = 6;

  // Resource name of the well-known `ProtocolConfig` selected for
  // `measurement_spec`. Output-only. Immutable.
  string protocol_config = 7
      [(google.api.resource_reference).type = "halo.wfanet.org/ProtocolConfig"];

  enum State {
    STATE_UNSPECIFIED = 0;
    // Waiting for all linked `Requisition`s to be fulfilled.
    AWAITING_REQUISITION_FULFILLMENT = 1;
    // Computation is running.
    COMPUTING = 2;
    // Completed successfully. Terminal state.
    SUCCEEDED = 3;
    // Completed with failure. Terminal state.
    FAILED = 4;
  }
  State state = 8;

  // The result of a `Measurement` computation.
  message Result {
    message Reach {
      // Number of unique users exposed.
      int64 value = 1;
    }
    Reach reach = 1;

    message Frequency {
      // Map of frequency to reach ratio. For example, an entry
      // {key: 4 value: 0.333} means that 33.3% of users were exposed exactly 4
      // times, unless 4 is the largest key (maximum frequency) in which case it
      // means that 33.3% of users were exposed at least 4 times.
      map<int64, double> relative_frequency_distribution = 1;
    }
    Frequency frequency = 2;
  }

  // X.509 certificate in DER format which can be verified using the
  // Aggregator's root certificate. Output-only. Only set if `state` is
  // `SUCCEEDED`.
  bytes aggregator_certificate = 9;

  // Encrypted `SignedData` containing the serialized `Result`, which can be
  // verified using `aggregator_certificate`. Output-only. Must be set if
  // `state` is `SUCCEEDED`.
  //
  // The encryption uses the `cipher_suite` specified in `measurement_spec`,
  // with `measurement_public_key` as the recipient public key.
  bytes encrypted_result = 10;

  // ID referencing the `Measurement` in an external system, provided by the
  // Measurement Consumer.
  //
  // If set, this value must be unique among `Measurement`s for the parent
  // `MeasurementConsumer`. This serves as an idempotency key for the
  // `Measurement`.
  string measurement_reference_id = 11;
}
