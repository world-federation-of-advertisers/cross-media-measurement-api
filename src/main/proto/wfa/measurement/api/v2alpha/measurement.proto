// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/crypto.proto";
import "wfa/measurement/api/v2alpha/data_provider.proto";
import "wfa/measurement/api/v2alpha/measurement_consumer.proto";
import "wfa/measurement/api/v2alpha/protocol_config.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MeasurementProto";

message Measurement {
  message Key {
    // ID of the parent `MeasurementConsumer`.
    string measurement_consumer_id = 1;
    // ID of this `Measurement`.
    string measurement_id = 2;
  }
  // Resource key.
  Key key = 1;

  // Resource key of the `MeasurementConsumerCertificate`. Required. Immutable.
  MeasurementConsumerCertificate.Key measurement_consumer_certificate = 2;

  // Serialized `MeasurementSpec` for requisitions, which can be verified using
  // `measurement_consumer_certificate`. Required. Immutable.
  SignedData measurement_spec = 3;

  // Serialized `DataProviderList` message containing the same `DataProvider`
  // resource keys as `data_provider_entries`. The order of the entries does not
  // matter. Required. Immutable.
  //
  // This is included as a separate field to provide a canonical serialization
  // for hashing, as the protocol buffer binary encoding specification does not
  // provide a deterministic serialization.
  bytes serialized_data_provider_list = 4;

  // A cryptographic salt for this `Measurement` that's used when computing the
  // SHA256 hash of `serialized_data_provider_list`. Required. Immutable.
  //
  // A randomly-generated 32-byte value should be ample.
  bytes data_provider_list_salt = 5;

  // TODO(b/175707034): Consider adding a field to hold the private keys which
  // is encrypted with some private/symmetric key belonging to the
  // `MeasurementConsumer`. This way the `MeasurementConsumer` need not store
  // the private keys for each `Measurement`.

  message DataProviderEntry {
    // Resource key of the `DataProvider` that this entry is for. Required.
    // Immutable.
    DataProvider.Key data_provider = 1;

    // Resource key of the DataProviderCertificate. Required. Immutable.
    DataProviderCertificate.Key data_provider_certificate = 2;

    // Pre-shared serialized `EncryptionPublicKey`, which can be verified using
    // `data_provider_certificate`. Required. Immutable.
    SignedData data_provider_public_key = 3;

    // Encrypted `SignedData` containing the serialized `RequisitionSpec` for
    // this entry, which can be verified using
    // `measurement_consumer_certificate`. Required. Immutable.
    //
    // The symmetric encryption key is derived using a key-agreement protocol
    // between `measurement_public_key` in `measurement_spec` and
    // `data_provider_public_key`.
    bytes encrypted_requisition_spec = 4;

    // Cryptographic digital signature of the "requisition fingerprint" which
    // can be verified using the `DataProvider`'s certificate. Output-only. Only
    // set if the corresponding `Requisition` has been fulfilled.
    //
    // The requisition fingerprint is defined as the concatenation of:
    // 1. The SHA256 hash of `encrypted_requisition_spec`.
    // 2. The SHA256 hash of the concatenation of
    //    `serialized_data_provider_list` and `data_provider_list_salt`.
    // 3. The `data` in `measurement_spec`.
    bytes data_provider_participation_signature = 5;
  }
  // The measurement entry for each `DataProvider`. This can be logically
  // represented as a map uniquely keyed by `DataProvider.Key`. Required.
  // Immutable.
  repeated DataProviderEntry data_provider_entries = 6;

  // Resource key of the well-known `ProtocolConfig` selected for
  // `measurement_spec`. Output-only. Immutable.
  ProtocolConfig.Key protocol_config = 7;

  enum State {
    STATE_UNSPECIFIED = 0;
    // Waiting for all linked `Requisition`s to be fulfilled.
    AWAITING_REQUISITION_FULFILLMENT = 1;
    // Computation is running.
    COMPUTING = 2;
    // Completed successfully. Terminal state.
    SUCCEEDED = 3;
    // Completed with failure. Terminal state.
    FAILED = 4;
  }
  State state = 8;

  // The result of a `Measurement` computation.
  message Result {
    message Reach {
      // Number of unique users exposed.
      int64 value = 1;
    }
    Reach reach = 1;

    message Frequency {
      // Map of frequency to reach ratio. For example, an entry
      // {key: 4 value: 0.333} means that 33.3% of users were exposed exactly 4
      // times, unless 4 is the largest key (maximum frequency) in which case it
      // means that 33.3% of users were exposed at least 4 times.
      map<int64, double> relative_frequency_distribution = 1;
    }
    Frequency frequency = 2;
  }

  // X.509 certificate in DER format which can be verified using the
  // Aggregator's root certificate. Output-only. Only set if `state` is
  // `SUCCEEDED`.
  bytes aggregator_certificate = 9;

  // Serialized `EncryptionPublicKey` for the `Result`, which can be verified
  // using `aggregator_certificate`. Output-only.
  //
  // Only set if `state` is `SUCCEEDED`.
  SignedData result_public_key = 10;

  // Encrypted `SignedData` containing the serialized `Result`, which can be
  // verified using `aggregator_certificate`. Output-only. Only set if `state`
  // is `SUCCEEDED`.
  //
  // The symmetric encryption key is derived using a key-agreement protocol
  // between `measurement_public_key` in `measurement_spec` and
  // `result_public_key`.
  bytes encrypted_result = 11;

  // Map of caller-defined tag keys to values for this `Measurement`.
  // These are to enable `MeasurementConsumer`s to apply labels to the
  // `Measurement` to aid in filtering and identifying later on.
  // Do not put sensitive data in this field.
  map<string, string> tags = 12;
}
