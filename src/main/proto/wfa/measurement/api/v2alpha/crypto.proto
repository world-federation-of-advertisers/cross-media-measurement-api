// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "CryptoProto";

// A public key in the ElGamal crypto system.
message ElGamalPublicKey {
  // ID of the OpenSSL built-in elliptic curve. For example, 415 for the
  // prime256v1 curve.
  int32 elliptic_curve_id = 1 [(google.api.field_behavior) = REQUIRED];

  // Public key generator `g`.
  bytes generator = 2 [(google.api.field_behavior) = REQUIRED];

  // Public key element `y = g^x`, where `g` is the generator and `x` is the
  // secret key.
  bytes element = 3 [(google.api.field_behavior) = REQUIRED];
}

// Data with an accompanying digital signature.
message SignedData {
  // Arbitrary data to sign.
  bytes data = 1 [(google.api.field_behavior) = REQUIRED];

  // Cryptographic digital signature of `data`.
  bytes signature = 2 [(google.api.field_behavior) = REQUIRED];

  // Object identifier (OID) of the signature algorithm in dot notation.
  //
  // If not specified, this is assumed to be the signature algorithm of the
  // accompanying certificate.
  string signature_algorithm_oid = 3;
}

// A public key for asymmetric encryption.
message EncryptionPublicKey {
  // Format of data for a public key.
  enum Format {
    // Default value used if the format is omitted.
    FORMAT_UNSPECIFIED = 0;

    // Tink Keyset format.
    //
    // `data` is a serialized google.crypto.tink.Keyset message. Encrypted
    // message values use Tink's wire format.
    //
    // See https://github.com/google/tink/blob/master/docs/WIRE-FORMAT.md,
    // https://github.com/google/tink/blob/master/proto/tink.proto.
    TINK_KEYSET = 1;
  }
  // Format of data for this public key.
  Format format = 1 [(google.api.field_behavior) = REQUIRED];

  // The format-specific key data.
  //
  // `format` and `data` together must specify all necessary information to
  // decrypt messages given a private key.
  bytes data = 2 [(google.api.field_behavior) = REQUIRED];
}
