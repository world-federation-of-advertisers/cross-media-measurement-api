// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";
import "wfa/measurement/api/v2alpha/protocol_config.proto";
import "wfa/measurement/api/v2alpha/requisition.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "RequisitionFulfillmentServiceProto";
option go_package = "github.com/world-federation-of-advertisers/cross-media-measurement/cmms/apiv2alpha/cmmspb";

// Duchy service for fulfilling `Requisition`s.
service RequisitionFulfillment {
  // Fulfills a [Requisition][] using a protocol other than
  // [Direct][ProtocolConfig.Direct].
  //
  // See [Requisitions.FulfillDirectRequisition][] for fulfilling a
  // [Requisition][] using the [Direct][ProtocolConfig.Direct] protocol.
  rpc FulfillRequisition(stream FulfillRequisitionRequest)
      returns (FulfillRequisitionResponse) {}
}

// Request message for `FulfillRequisition` method.
message FulfillRequisitionRequest {
  // The header message for this streaming request.
  // (-- api-linter: core::0123::resource-annotation=disabled
  //     aip.dev/not-precedent: This is not a resource message. --)
  message Header {
    // Resource name of the `Requisition`.
    string name = 1 [
      (google.api.resource_reference).type = "halo.wfanet.org/Requisition",
      (google.api.field_behavior) = REQUIRED
    ];

    // The fingerprint of the `Requisition`.
    //
    // This is defined as the SHA256 hash of the concatenation of:
    // 1. The `data` in `measurement_spec` from the `Requisition`.
    // 2. The SHA256 hash of `encrypted_requisition_spec` from the
    //    `Requisition`.
    bytes requisition_fingerprint = 2 [(google.api.field_behavior) = REQUIRED];

    // The `nonce` value from the `encrypted_requisition_spec`.
    // (-- api-linter: core::0141::forbidden-types=disabled
    //     aip.dev/not-precedent: This is a random 64-bit value. --)
    fixed64 nonce = 3 [(google.api.field_behavior) = REQUIRED];

    // The protocol config of the Computation. This is used to validate that
    // EDPs and the MPC are using the same protocol config.
    //
    // Required for HonestMajorityShareShuffle protocol. All protocols will
    // require this field in the future.
    ProtocolConfig protocol_config = 4;

    // Protocol specified values for HonestMajorityShareShuffle.
    //
    // A Requisition of HonestMajorityShareShuffle protocol is fulfilled by
    // either a seed or a blob of `BodyChunk`s.
    message HonestMajorityShareShuffle {
      // An encrypted SignedMessage of RandomSeed.
      //
      // The RandomSeed is signed by DataProvider, and encrypted using peer
      // worker's public key in
      // Requisition.DuchyEntry.HonestMajorityShareShuffle.
      EncryptedMessage secret_seed = 1;

      // The number of registers in the sketch.
      //
      // It is calculated by the DataProvider and is determined by the sampling
      // interval and the size of the population being measured. It is expected
      // that all DataProviders will yield the same value for a specific
      // Computation.
      int64 register_count = 2;

      // Resource name of the `Certificate` belonging to the parent
      // `DataProvider` used to verify the secret_seed signature.
      string data_provider_certificate = 3 [
        (google.api.resource_reference).type = "halo.wfanet.org/Certificate",
        (google.api.field_behavior) = REQUIRED
      ];
    }

    // Protocol specified values for TrusTEE.
    message TrusTee {
      // Specification for envelope decryption, where the Data Encryption Key
      // (DEK) is sent in an encrypted form.
      message EnvelopeDecryption {
        // An [EncryptionKey] in an encrypted format, used as the Data
        // Encryption Key (DEK).
        EncryptionKey encrypted_dek = 1;
        // The URI of the Key Encryption Key (KEK) in a KMS that is used to
        // decrypt `encrypted_dek`.
        string kms_kek_uri = 2;
        // Resource name of the workload identity provider to impersonate the
        // service account with KEK access.
        string workload_identity_provider = 3;
        // The service account to impersonate to get an access token for the
        // KEK.
        string impersonated_service_account = 4;
      }

      // Specification for key derivation, where the Data Encryption Key
      // (DEK) is derived from a master key.
      message KeyDerivation {
        // The context used for key derivation.
        bytes derivation_context = 1;
        // The URI of the master key in KMS used for key derivation.
        string kms_master_key_uri = 2;
        // Resource name of the workload identity provider to impersonate the
        // service account with the master key access.
        string workload_identity_provider = 3;
        // The service account to impersonate to get an access token for the
        // master key.
        string impersonated_service_account = 4;
      }

      // Format of data in [BodyChunk]s after decryption (if encrypted).
      enum DataFormat {
        // Default value used if the data format is omitted.
        DATA_FORMAT_UNSPECIFIED = 0;

        // Frequency vector in plaintext.
        //
        // It is an array of 32-bit signed integers in big-endian.
        FREQUENCY_VECTOR = 1;

        // Encrypted frequency vector that can be decrypted using one of the
        // decryption specifications.
        //
        // The content of it is an array of 32-bit signed integers in
        // big-endian. The encryption algorithm is AES-256-GCM.
        ENCRYPTED_FREQUENCY_VECTOR = 2;
      }
      // Format of data in [BodyChunk]s after decryption (if encrypted).
      DataFormat data_format = 1;

      // The specification used to access the KMS and decrypt the data if the
      // data is encrypted.
      //
      // Required if [data_format][] is
      // [DataFormat.ENCRYPTED_FREQUENCY_VECTOR][].
      oneof decryption_spec {
        // Specification for envelope decryption.
        EnvelopeDecryption envelope_decryption = 2;
        // Specification for key derivation.
        KeyDerivation key_derivation = 3;
      }

      // The FarmHash fingerprint of the PopulationSpec.
      //
      // This is a fingerprint computed from the sorted VID ranges in
      // [PopulationSpec].
      // TODO (@renjiezh): Add detailed description of how to generate
      // the hash.
      int64 population_spec_fingerprint = 4;
    }

    // Protocol specified values.
    oneof protocol {
      // Honest Majority Shuffle based secret sharing protocol. Fulfilled by
      // either chunks (a blob), or a seed.
      HonestMajorityShareShuffle honest_majority_share_shuffle = 5;

      // TrusTEE protocol.
      TrusTee trus_tee = 8;
    }

    // Context information related to the fulfillment of the [Requisition][].
    Requisition.FulfillmentContext fulfillment_context = 6;

    // Etag of the requisition.
    //
    // If it is specified and the value does not match the current etag in the
    // operation, the operation will not occur and will result in an ABORTED
    // status.
    // TODO(@renjiezh): Make this REQUIRED once it has been adopted by all EDPs.
    string etag = 7 [(google.api.field_behavior) = OPTIONAL];
  }

  // The chunk message for this streaming request.
  message BodyChunk {
    // The portion of the data for this `BodyChunk`.
    //
    // The format of the data depends on the corresponding `MeasurementSpec` and
    // `ProtocolConfig`.
    //
    // If the `Requisition` is for an encrypted sketch for LiquidLegionV2
    // protocols, this is the register data as documented in the `Sketch`
    // message (sketch.proto) encrypted using the combined `Duchy` ElGamal
    // public keys.
    //
    // If the `Requisition` is a sketch for HonestMajorityShareShuffle protocol,
    // this is an array of counts as registers.
    //
    // The only alignment requirement is by bytes: a chunk might begin or end in
    // the middle of a single register.
    //
    // The optimal size of this field is one that would result in the
    // `FulfillRequisitionRequest` message being between 16KiB and 64KiB.
    // See https://github.com/grpc/grpc.github.io/issues/371
    bytes data = 1 [(google.api.field_behavior) = REQUIRED];
  }

  // Request message payload. Exactly one of these must be specified.
  oneof payload {
    // The header for this streaming request, specified as the payload for the
    // first request message.
    Header header = 1;

    // The body chunk for this streaming request, specified on subsequent
    // request messages to the first one containing the header.
    BodyChunk body_chunk = 2;
  }
}

// Response message for `FulfillRequisition` method.
message FulfillRequisitionResponse {
  // Resulting state of the `Requisition`.
  Requisition.State state = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}
