// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// (--
//    api-linter: core::0123::resource-annotation=disabled
//    aip.dev/not-precedent: These are protobuf annotations, not API messages.
//  --)

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/protobuf/descriptor.proto";
import "wfa/measurement/api/v2alpha/media_type.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "EventAnnotationsProto";
option go_package = "github.com/world-federation-of-advertisers/cross-media-measurement/cmms/apiv2alpha/cmmspb";

// Descriptor for a field inside of an event template message.
message EventFieldDescriptor {
  // Human-readable name of the field, e.g. for display in a UI. Required.
  string display_name = 1;
  // High-level description of the field.
  string description = 2;
  // Whether the field is a population field.
  //
  // A population attribute is:
  //   1. an attribute of a Virtual Person (VID), (That is, it is a
  //      a dimension of the output of the VID model.)
  //   2. partitions the space of VIDs.
  // For example, "age bucket" is usually a population attribute.
  bool population_attribute = 3;
  // The set of reporting features for which an Event Field may be used.
  enum ReportingFeature {
    // Default value. Unused.
    REPORTING_FEATURE_UNSPECIFIED = 0;
    // Indicates that a field can be used as grouping criteria.
    GROUPABLE = 1;
    // Indicates that a field can be used as part of an event filter.
    FILTERABLE = 2;
    // Indicates that a field can be used as part of an impression qualification
    // filter.
    IMPRESSION_QUALIFICATION = 3;
  }
  // Specifies the reporting features that the field is enabled for.
  //
  // For example, if a particular EventField is annotated with `GROUPABLE`
  // it can be used as a dimension for grouping metrics in `BasicReport`.
  // An example of an EventField that is likely to be `GROUPABLE` is AgeGroup.
  repeated ReportingFeature reporting_features = 5;

  // The Event version when this field was added.
  //
  // This value must be less than or equal to the Event `current_version`.
  int32 version_added = 6;

  // The Event version when this field was removed.
  //
  // This value must be less than or equal to the Event `current_version`, and
  // it must be greater than `version_added`.
  int32 version_removed = 7;
}

// Descriptor for an event template message type.
message EventTemplateDescriptor {
  // Name of the field in an event message that uses this template. Required.
  // Immutable.
  //
  // This must follow the naming convention for protocol buffers fields (see
  // https://developers.google.com/protocol-buffers/docs/style). It must be
  // unique across all events in which this template may be used.
  string name = 1;
  // Human-readable name of the Event Template. Required.
  string display_name = 2;
  // High-level description of the Event Template.
  string description = 3;
  // The `MediaType` to which this template applies. If a template is not
  // annotated with a `media_type` then it applies to all `MediaType`s
  MediaType media_type = 4;
}
// Descriptor for an Event message type.
message EventDescriptor {
  // The current version of the Event. Must be positive. Updates to any
  // particular Event message must be monotonically increasing. We also
  // recommend maintaining a comment history in the Event message that describes
  // the changes between each version.
  int32 current_version = 2;
}

// Custom options for messages. Numbering starts at 50000 which is the start of
// the range for internal use.
extend google.protobuf.MessageOptions {
  EventTemplateDescriptor event_template = 50000;
  EventFieldDescriptor event_field = 50001 [deprecated = true];
  EventDescriptor event = 50002;
}

// Custom options for fields. Numbering starts at 50000 which is the start of
// the range for internal use.
extend google.protobuf.FieldOptions {
  EventFieldDescriptor template_field = 50000;
}
