// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/account.proto";
import "wfa/measurement/api/v2alpha/measurement_consumer.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MeasurementConsumersServiceProto";

// Service for interacting with `MeasurementConsumer` resources.
service MeasurementConsumers {
  // Returns the `MeasurementConsumer` with the specified resource key.
  rpc GetMeasurementConsumer(GetMeasurementConsumerRequest)
      returns (MeasurementConsumer) {}

  // Creates (registers) a `MeasurementConsumer`.
  rpc CreateMeasurementConsumer(CreateMeasurementConsumerRequest)
      returns (MeasurementConsumer) {}

  // Adds an owner to the specified `MeasurementConsumer`.
  rpc AddMeasurementConsumerOwner(AddMeasurementConsumerOwnerRequest)
      returns (MeasurementConsumer) {}

  // Removes an owner from the specified `MeasurementConsumer`.
  rpc RemoveMeasurementConsumerOwner(RemoveMeasurementConsumerOwnerRequest)
      returns (MeasurementConsumer) {}

  // Updates the `MeasurementConsumerPublicKey` for the specified
  // `MeasurementConsumer`.
  rpc UpdateMeasurementConsumerPublicKey(
      UpdateMeasurementConsumerPublicKeyRequest)
      returns (MeasurementConsumerPublicKey) {}
}

// Request message for `GetMeasurementConsumer` method.
message GetMeasurementConsumerRequest {
  // Resource key.
  MeasurementConsumer.Key key = 1;
}

// Request message for `CreateMeasurementConsumer` method.
message CreateMeasurementConsumerRequest {
  // The `MeasurementConsumer` to create. Required. The `key` field will be
  // ignored, and the system will assign an ID.
  MeasurementConsumer measurement_consumer = 1;
}

// Request message for `AddMeasurementConsumerOwner` method.
message AddMeasurementConsumerOwnerRequest {
  // Resource key.
  MeasurementConsumer.Key key = 1;

  // Resource key of the `Account` to add as an owner of this
  // `MeasurementConsumer`. Required.
  Account.Key account = 2;
}

// Request message for `RemoveMeasurementConsumerOwner` method.
message RemoveMeasurementConsumerOwnerRequest {
  // Resource key.
  MeasurementConsumer.Key key = 1;

  // Resource key of the `Account` to remove as an owner of this
  // `MeasurementConsumer`. Required.
  Account.Key account = 2;
}

// Request message for `UpdateMeasurementConsumerPublicKey` method.
message UpdateMeasurementConsumerPublicKeyRequest {
  // Resource to update. Required.
  MeasurementConsumerPublicKey measurement_consumer_public_key = 1;
}
