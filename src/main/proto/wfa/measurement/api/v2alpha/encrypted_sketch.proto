// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "EncryptedSketchProto";
option go_package = "github.com/world-federation-of-advertisers/cross-media-measurement/cmms/apiv2alpha/cmmspb";

// Encrypted generalized enriched cardinality sketch.
//
// The sketch, logically, is a sparse collection of registers, each of which
// have a single index and d values, where d is a parameter of the sketch
// configuration.
//
message EncryptedSketch {
  // Encrypted register data.
  //
  // ElGamal encryption is used here. The ElGamal public key consists of two
  // components: (g, y). To encrypt a message m, a random number r is selected.
  // The ciphertext then consists of a pair of compressed Elliptic Curve Points
  // (ECPoint), where each compressed ECPoint is 33-bytes wide.
  //   u = g^r
  //   e = m * y^r.
  //
  // For this application the order of the underlying field is 2^256. This in
  // turn implies that elements of the group require 256-bits (or 32-bytes) to
  // encode, of which the secret key is a particular element.
  //
  // However, each ECPoint is actually a (x, y) tuple where both x and y
  // are elements of the group and are therefore each 32-bytes wide, and thus
  // together the ECPoint is 64-bytes wide. This is referred to as the
  // uncompressed encoding.
  //
  // Compression consists of storing just the x coordinate of the tuple along
  // with the sign of y, which is sufficient to recover the entire ECPoint.
  // Therefore a compressed ECPoint is just 33-bytes. Note that we actually only
  // use 1 bit in the last byte.
  //
  // This leads to u and e each having a size of 33-bytes, which are then
  // stored as bytes in little-endian order with the values u and e concatenated
  // with u coming first.
  //
  // Each register is a contiguous series of ElGamal ciphertexts. The register
  // is laid out with the index first, then the d values in range [1, d]:
  //
  //       [index.u][index.e][value_1.u][value_1.e]...[value_d.u][value_d.e]
  //  byte 0        33       66         99            2d*33      2d*33+33
  //
  // The registers are concatenated in an arbitrary order.
  //
  // It is invalid to have two registers with the same index.
  bytes register_data = 1;
}
