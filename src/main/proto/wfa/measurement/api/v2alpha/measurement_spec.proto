// Copyright 2023 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "wfa/measurement/api/v2alpha/differential_privacy.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MeasurementSpecProto";

// Specification for a `Measurement`. Immutable.
message MeasurementSpec {
  // `EncryptionPublicKey` for the `Measurement` that this `MeasurementSpec` is
  // associated with.
  //
  // This is serialized so it can be compared with the same field in
  // `RequisitionSpec`.
  //
  // Required for new requests. If not specified, use
  // `serialized_measurement_public_key`.
  google.protobuf.Any measurement_public_key = 10;

  // Serialized `EncryptionPublicKey` for the `Measurement` that this
  // `MeasurementSpec` is associated with.
  //
  // This is serialized so it can be easily compared with the same field in
  // `RequisitionSpec`.
  //
  // Deprecated: Use `measurement_public_key` except for reading legacy
  // resources.
  bytes serialized_measurement_public_key = 1 [deprecated = true];

  // List of `nonce_hash` values from `data_providers` of the corresponding
  // `Measurement`.
  repeated bytes nonce_hashes = 2 [(google.api.field_behavior) = REQUIRED];

  // Specifies a range of VIDs to be sampled.
  // start + width cannot be larger than 1
  message VidSamplingInterval {
    // Start of the sampling interval.
    float start = 1;
    // Width of the sampling interval.
    float width = 2;
  }

  // Range of VIDs that will be included in this measurement
  VidSamplingInterval vid_sampling_interval = 3;

  // Parameters for a reach-only measurement.
  message Reach {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams privacy_params = 1;
  }

  // Parameters for a reach and frequency measurement.
  message ReachAndFrequency {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams reach_privacy_params = 1;

    // Differential privacy parameters for frequency.
    DifferentialPrivacyParams frequency_privacy_params = 2;

    // The maximum frequency to reveal in the distribution.
    //
    // This is required in new `CreateMeasurement` requests, but may not be
    // specified for legacy `Measurement`s. In the case where it is not
    // specified, it must instead be read from the corresponding field in
    // `ProtocolConfig`.
    int32 maximum_frequency = 3;
  }

  // Parameters for an impression measurement.
  message Impression {
    // Differential privacy parameters.
    DifferentialPrivacyParams privacy_params = 1;

    // Maximum frequency per user that would be included in this measurement.
    //
    // If the custom_maximum_frequency_per_user in the DeterministicCount
    // methodology is specified, this field will be ignored and the value from
    // that message will be used instead.
    int32 maximum_frequency_per_user = 2
        [(google.api.field_behavior) = REQUIRED];
  }

  // Parameters for a duration measurement.
  message Duration {
    reserved 3;

    // Differential privacy parameters.
    DifferentialPrivacyParams privacy_params = 1;

    // Maximum watch duration per user that will be included in this
    // measurement.
    //
    // This may not be specified for legacy Measurements, in which case
    // `maximum_watch_duration_per_user_seconds` must be read instead.
    google.protobuf.Duration maximum_watch_duration_per_user = 4;

    // Maximum watch duration in seconds per user that will be included in this
    // measurement.
    //
    // Deprecated: Use maximum_watch_duration_per_user.
    int32 maximum_watch_duration_per_user_seconds = 2 [deprecated = true];
  }

  // Parameters for a population measurement.
  message Population {}

  // Fields specific to the type of measurement.
  oneof measurement_type {
    // Parameters for a reach and frequency measurement.
    ReachAndFrequency reach_and_frequency = 4;
    // Parameters for an impression measurement.
    Impression impression = 5;
    // Parameters for a duration measurement.
    Duration duration = 6;
    // Parameters for a reach-only measurement.
    Reach reach = 7;
    // Parameters for a population-only measurement.
    Population population = 8;
  }

  // Resource name of the ModelLine for this measurement.
  string model_line = 9 [
    (google.api.resource_reference).type = "halo.wfanet.org/ModelLine",
    (google.api.field_behavior) = IMMUTABLE
  ];
}
