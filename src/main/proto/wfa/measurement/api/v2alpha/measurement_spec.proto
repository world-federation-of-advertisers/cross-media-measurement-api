// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/differential_privacy.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MeasurementSpecProto";

// Specification for a `Measurement`. Immutable.
message MeasurementSpec {
  // Serialized `EncryptionPublicKey` for the `Measurement` that this
  // `MeasurementSpec` is associated with. Required.
  //
  // This is serialized so it can be easily compared with the same field in
  // `RequisitionSpec`.
  bytes measurement_public_key = 1;

  // List of `nonce_hash` values from `data_providers` of the corresponding
  // `Measurement`. Required.
  repeated bytes nonce_hashes = 2;

  // Specifies a range of VIDs to be sampled.
  // start + width cannot be larger than 1
  message VidSamplingInterval {
    float start = 1;
    float width = 2;
  }

  // Range of VIDs that will be included in this measurement
  VidSamplingInterval vid_sampling_interval = 3;

  message Reach {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams privacy_params = 1;
  }

  message ReachAndFrequency {
    // Differential privacy parameters for reach.
    DifferentialPrivacyParams reach_privacy_params = 1;

    // Differential privacy parameters for frequency.
    DifferentialPrivacyParams frequency_privacy_params = 2;

    // Maximum frequency per user that will be included in this measurement.
    int32 maximum_frequency_per_user = 3;
  }

  message Impression {
    DifferentialPrivacyParams privacy_params = 1;

    // Maximum frequency per user that will be included in this measurement.
    int32 maximum_frequency_per_user = 2;
  }

  message Duration {
    DifferentialPrivacyParams privacy_params = 1;

    // Maximum watch duration in seconds per user that will be included in this
    // measurement.
    int32 maximum_watch_duration_per_user = 2;

    // Maximum frequency per user that will be included in this measurement.
    int32 maximum_frequency_per_user = 3;
  }

  // Fields specific to the type of measurement.
  oneof measurement_type {
    ReachAndFrequency reach_and_frequency = 4;
    Impression impression = 5;
    Duration duration = 6;
    Reach reach = 7;
  }
}
