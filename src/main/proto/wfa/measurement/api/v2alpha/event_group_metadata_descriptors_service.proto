// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/event_group_metadata_descriptor.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "EventGroupMetadataDescriptorsServiceProto";

// Service for interacting with `EventGroupMetadataDescriptor` resources.
service EventGroupMetadataDescriptors {
  // Returns the `EventGroupMetadataDescriptor` with the specified resource
  // name.
  rpc GetEventGroupMetadataDescriptor(GetEventGroupMetadataDescriptorRequest)
      returns (EventGroupMetadataDescriptor) {}

  // Creates (registers) a `EventGroupMetadataDescriptor` defined in the
  // specified `DataProvider`'s system.
  rpc CreateEventGroupMetadataDescriptor(
      CreateEventGroupMetadataDescriptorRequest)
      returns (EventGroupMetadataDescriptor) {}

  // Updates an existing `EventGroupMetadataDescriptor`. Results in a
  // `PERMISSION_DENIED` error if the authenticated user does not have access to
  // the `EventGroupMetadataDescriptor`. Results in a `NOT_FOUND` error if the
  // the specified `EventGroupMetadataDescriptor` does not exist.
  rpc UpdateEventGroupMetadataDescriptor(
      UpdateEventGroupMetadataDescriptorRequest)
      returns (EventGroupMetadataDescriptor) {}

  // Batch gets `EventGroupMetadataDescriptors`s. Results in a `NOT_FOUND` error
  // if any of the specified `EventGroupMetadataDescriptor`s does not exist.
  rpc BatchGetEventGroupMetadataDescriptors(
      BatchGetEventGroupMetadataDescriptorsRequest)
      returns (BatchGetEventGroupMetadataDescriptorsResponse) {}
}

// Request message for `GetEventGroupMetadataDescriptor` method.
message GetEventGroupMetadataDescriptorRequest {
  // Resource name.
  string name = 1 [(google.api.resource_reference).type =
                       "halo.wfanet.org/EventGroupMetadataDescriptor"];
}

// Request message for `CreateEventGroupMetadataDescriptor` method.
message CreateEventGroupMetadataDescriptorRequest {
  // Resource name of the parent `DataProvider`. Required.
  string parent = 1
      [(google.api.resource_reference).type = "halo.wfanet.org/DataProvider"];

  // The `EventGroupMetadataDescriptor` to create. Required.
  //
  // The `name` field will be ignored, and the system will assign an ID. Results
  // in an `ALREADY_EXISTS` error if there is already a child
  // `EventGroupMetadataDescriptor` with the same `event_group_reference_id`.
  EventGroupMetadataDescriptor event_group_metadata_descriptor = 2;
}

// Request message for `UpdateEventGroup` method.
message UpdateEventGroupMetadataDescriptorRequest {
  // The `EventGroupMetadataDescriptor` to update. Required.
  EventGroupMetadataDescriptor event_group_metadata_descriptor = 1;
}

message BatchGetEventGroupMetadataDescriptorsRequest {
  // Resource name of the parent `DataProvider`. Required.
  string parent = 1
      [(google.api.resource_reference).type = "halo.wfanet.org/DataProvider"];

  // The names of `EventGroupMetadataDescriptor`s to retrieve.
  repeated string names = 2
      [(google.api.resource_reference).type =
           "halo.wfanet.org/EventGroupMetadataDescriptor"];
}

message BatchGetEventGroupMetadataDescriptorsResponse {
  // The `EventGroupMetadataDescriptor` resources.
  repeated EventGroupMetadataDescriptor event_group_metadata_descriptors = 1;
}