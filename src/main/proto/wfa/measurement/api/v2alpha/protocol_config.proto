// Copyright 2021 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "google/api/resource.proto";
import "wfa/measurement/api/v2alpha/differential_privacy.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "ProtocolConfigProto";

// Configuration for computation protocols.
message ProtocolConfig {
  // Resource name.
  //
  // Deprecated: This is not a resource message type.
  string name = 1 [deprecated = true];

  // Type of measurement.
  //
  // The values should correspond to the fields in the `measurement_type` Oneof
  // in `MeasurementSpec`.
  enum MeasurementType {
    MEASUREMENT_TYPE_UNSPECIFIED = 0;
    REACH_AND_FREQUENCY = 1;
    IMPRESSION = 2;
    DURATION = 3;
    REACH = 4;
  }
  // The type of measurement that this protocol computes. Required. Immutable.
  MeasurementType measurement_type = 2;

  // Configuration for the Liquid Legions v2 R/F protocol.
  message LiquidLegionsV2 {
    // Parameters for sketch. Required.  Immutable.
    LiquidLegionsSketchParams sketch_params = 1;

    // Differential privacy parameters for data provider noise registers.
    // Required. Immutable.
    //
    // Each of these registers contains a well-known constant register ID, and
    // arbitrary key and count values.
    DifferentialPrivacyParams data_provider_noise = 2;

    // ID of the OpenSSL built-in elliptic curve. For example, 415 for the
    // prime256v1 curve. Required. Immutable.
    int32 elliptic_curve_id = 3;

    // The maximum frequency to reveal in the histogram.
    int32 maximum_frequency = 4;
  }

  // Protocol for direct measurement.
  message Direct {}

  message Protocol {
    // Configuration for the specific protocol.
    oneof protocol {
      // Liquid Legions v2 config.
      //
      // May only be set when the measurement type is REACH_AND_FREQUENCY.
      // Requisition can be fulfilled by calling
      // RequisitionFulfillment/FulfillRequisition with an encrypted sketch.
      LiquidLegionsV2 liquid_legions_v2 = 1;

      // Direct protocol.
      //
      // The Requisition can be fulfilled by calling
      // Requisitions/FulfillDirectRequisition.
      Direct direct = 2;
    }
  }

  // Configuration for the specific protocol. Required. Immutable.
  oneof protocol {
    // Liquid Legions v2 config.
    //
    // May only be set when `measurement_type` is `REACH_AND_FREQUENCY`.
    //
    // Deprecated and replace with protocols.
    LiquidLegionsV2 liquid_legions_v2 = 3 [deprecated = true];
  }

  // List of protocols the EDP may use.
  repeated Protocol protocols = 4;
}

// Parameters for a Liquid Legions sketch.
message LiquidLegionsSketchParams {
  // The decay rate of the Liquid Legions sketch. Required.
  double decay_rate = 1;

  // The maximum size of the Liquid Legions sketch.  Required.
  int64 max_size = 2;

  // The size of the distribution of the sampling indicator value. Required.
  int64 sampling_indicator_size = 3;
}
