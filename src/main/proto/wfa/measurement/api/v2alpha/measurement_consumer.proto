// Copyright 2020 The Cross-Media Measurement Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package wfa.measurement.api.v2alpha;

import "wfa/measurement/api/v2alpha/account.proto";
import "wfa/measurement/api/v2alpha/crypto.proto";

option java_package = "org.wfanet.measurement.api.v2alpha";
option java_multiple_files = true;
option java_outer_classname = "MeasurementConsumerProto";

// A consumer of `Measurement` results. For example, an advertiser or ad agency.
message MeasurementConsumer {
  message Key {
    string measurement_consumer_id = 1;
  }
  // Resource key.
  Key key = 1;

  // X.509 certificate in DER format which can be verified using the
  // `MeasurementConsumer`'s root certificate. Required.
  bytes certificate = 2;

  // Resource key of the `MeasurementConsumerCertificate` that matches
  // `certificate`. Output-only.
  MeasurementConsumerCertificate.Key measurement_consumer_certificate = 3;

  // Encryption public key for this `MeasurementConsumer` in DER format, which
  // can be verified using `certificate`. Required.
  SignedData public_key = 4;

  // Official name of the `MeasurementConsumer`.
  string title = 5;

  // Resource keys of owner `Account`s. Output-only.
  repeated Account.Key owners = 6;
}

message MeasurementConsumerCertificate {
  message Key {
    // ID of the parent `MeasurementConsumer`.
    string measurement_consumer_id = 1;
    // ID of this `MeasurementConsumerCertificate`.
    string measurement_consumer_certificate_id = 2;
  }
  // Resource key.
  Key key = 1;

  // X.509 certificate in DER format which can be verified using the
  // `MeasurementConsumer`'s root certificate. Required. Immutable.
  bytes certificate = 2;
}

// Encryption public key for the `MeasurementConsumer`. Singleton resource.
message MeasurementConsumerPublicKey {
  // Resource key.
  MeasurementConsumer.Key key = 1;

  // Encryption public key for this `MeasurementConsumer`, which can be verified
  // using `measurement_consumer_certificate`. Required.
  SignedData public_key = 2;

  // Resource key of the `MeasurementConsumerCertificate` that can be used to
  // verify `public_key`.
  MeasurementConsumerCertificate.Key measurement_consumer_certificate = 3;
}
